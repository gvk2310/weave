def label = "Devnetops-${UUID.randomUUID().toString()}"
def serviceaccount = "jenkins-admin"
podTemplate(label: label, serviceAccount: serviceaccount,
           containers: [containerTemplate(name: 'python', image: 'devnetops.azurecr.io/python3_devnetops:27072020', ttyEnabled: true, command: 'cat'),
						containerTemplate(name: 'ansible', image: 'devnetops.azurecr.io/devnetops-ansible:latest', ttyEnabled: true, command: 'cat')],
		   imagePullSecrets: ['devnetops'])

{
    node(label){
		def TOKEN="11d2cc12486764cb4e2862d2388b70a826"
        sh "curl -X PUT ${status_url} -H 'Auth-Token: ${TOKEN}' -H 'Content-Type: application/json' -d '{\"deployment_id\":\"${deployment_id}\", \"status\":\"DEPLOY_IN_PROGRESS\", \"message\":\"\",\"stage_info\":{\"CHECKOUT SOURCE CODE\": \"\", \"GET DEPLOYMENT FILES\": \"\",\"SDWAN BRANCHES IN CLOUD\": \"\"}}'"
		try{
			stage('CHECKOUT SOURCE CODE'){
				last_stage = STAGE_NAME
				git branch: "DevNetOps-MP-Integration-V1",
				url: "https://innersource.accenture.com/scm/dnp/devnetops.git",
				credentialsId: innersource_cred
                sh "curl -X PUT ${status_url} -H 'Auth-Token: ${TOKEN}' -H 'Content-Type: application/json' -d '{\"deployment_id\":\"${deployment_id}\", \"status\":\"DEPLOY_IN_PROGRESS\", \"message\":\"Source code checked out\", \"stage_info\":{\"${last_stage}\": \"Completed\"}}'"
			}
			stage('GET DEPLOYMENT FILES'){
				last_stage = STAGE_NAME
				for (item in assets.split(';')){
					def url = item.split(',')[1]
					def user = item.split(',')[2]
					def pass = item.split(',')[3]
					sh "wget --user=${user} --password=${pass}  --timeout=1 --waitretry=0 --tries=5 --retry-connrefused ${url}"
                sh "curl -X PUT ${status_url} -H 'Auth-Token: ${TOKEN}' -H 'Content-Type: application/json' -d '{\"deployment_id\":\"${deployment_id}\", \"status\":\"DEPLOY_IN_PROGRESS\", \"message\":\"Assets retrieved\", \"stage_info\":{\"${last_stage}\": \"Completed\"}}'"
				}
				}
			stage('SDWAN BRANCHES IN CLOUD'){
				last_stage = STAGE_NAME
				container('python'){
					sh 'python3 AwsstackPipeline/stack_create.py'
				}
				def instanceDetails = readFile(file: 'instanceDetails')
                sh "curl -X PUT ${status_url} -H 'Auth-Token: ${TOKEN}' -H 'Content-Type: application/json' -d '{\"deployment_id\":\"${deployment_id}\", \"status\":\"DEPLOY_IN_PROGRESS\", \"message\":\"Stack created\", \"stage_info\":{\"${last_stage}\": \"Completed\"}, \"instances\":${instanceDetails}}'"
			}
        }catch (e) {
			sh "curl -X PUT ${status_url} -H 'Auth-Token: ${TOKEN}' -H 'Content-Type: application/json' -d '{\"deployment_id\":\"${deployment_id}\", \"status\":\"DEPLOY_FAILED\", \"message\":\"Failed to ${last_stage}.\",\"stage_info\":{\"${last_stage.toUpperCase()}\": \"Failed\"}}'"
			currentBuild.result = 'FAILURE'
		}finally{
			if (!currentBuild.result || currentBuild.result=='SUCCESS'){
            	sh "curl -X PUT ${status_url} -H 'Auth-Token: ${TOKEN}' -H 'Content-Type: application/json' -d '{\"deployment_id\":\"${deployment_id}\", \"status\":\"DEPLOY_COMPLETE\", \"message\":\"done\"}'"
			}
		}
	}
}
