def label = "Devnetops-${UUID.randomUUID().toString()}"
def serviceaccount = "jenkins-admin"
podTemplate(label: label, serviceAccount: serviceaccount,
           containers: [containerTemplate(name: 'python', image: 'aiindevops.azurecr.io/devnetops-release:python3', ttyEnabled: true, command: 'cat'),
						containerTemplate(name: 'ansible', image: 'aiindevops.azurecr.io/devnetops-release:ansible', ttyEnabled: true, command: 'cat')],
						volumes: [configMapVolume(mountPath: '/usr/config', configMapName: 'clove-agent-env')],
		   imagePullSecrets: ['regcred'])

{
    node(label){		
        
        native_token = sh(script:'#!/bin/sh -e\n' + "cat /usr/config/ADMIN_PASSWORD", returnStdout: true).trim()
        withSecretEnv([[var: 'TOKEN', password: native_token]]) {sh "curl -X PUT ${status_url} -H 'Native-Token: ${TOKEN}' -H 'Content-Type: application/json' -d '{\"deployment_id\":\"${deployment_id}\", \"status\":\"DEPLOY_IN_PROGRESS\", \"message\":\"\",\"stage_info\":{\"Checkout Source Code\": \"\", \"Get Deployment Files\": \"\",\"StackDeployment In Cloud\": \"\"}}'"}
        
	try{
			stage('Checkout Source Code'){
				last_stage = STAGE_NAME
				git branch: "master",
				url: "http://gitlab.ethan.svc.cluster.local:8084/gitlab/root/devnetops_cartridge.git",
				credentialsId: "gitlab"
                withSecretEnv([[var: 'TOKEN', password: native_token]]) {sh "curl -X PUT ${status_url} -H 'Native-Token: ${TOKEN}' -H 'Content-Type: application/json' -d '{\"deployment_id\":\"${deployment_id}\", \"status\":\"DEPLOY_IN_PROGRESS\", \"message\":\"Source code checked out\", \"stage_info\":{\"${last_stage}\": \"Completed\"}}'"}
			}
			stage('Get Deployment Files'){
				last_stage = STAGE_NAME
				for (item in assets.split(';')){
					def url = item.split(',')[1]
					def user = item.split(',')[2]
					def pass = item.split(',')[3]
                       sh """
					   set +x
					   wget --user=${user} --password=${pass}  --timeout=1 --waitretry=0 --tries=5 --retry-connrefused ${url}
					   set -x
					   """
                withSecretEnv([[var: 'TOKEN', password: native_token]]) {sh "curl -X PUT ${status_url} -H 'Native-Token: ${TOKEN}' -H 'Content-Type: application/json' -d '{\"deployment_id\":\"${deployment_id}\", \"status\":\"DEPLOY_IN_PROGRESS\", \"message\":\"Assets retrieved\", \"stage_info\":{\"${last_stage}\": \"Completed\"}}'"}
				}
				}
			stage('StackDeployment In Cloud'){
				last_stage = STAGE_NAME
				container('python'){
					sh 'python3 AwsstackPipeline/stack_create.py'
				}
				def instanceDetails = readFile(file: 'instanceDetails')
                withSecretEnv([[var: 'TOKEN', password: native_token]]) {sh "curl -X PUT ${status_url} -H 'Native-Token: ${TOKEN}' -H 'Content-Type: application/json' -d '{\"deployment_id\":\"${deployment_id}\", \"status\":\"DEPLOY_IN_PROGRESS\", \"message\":\"Stack created\", \"stage_info\":{\"${last_stage}\": \"Completed\"}, \"instances\":${instanceDetails}}'"}
			}
        }catch (e) {
			withSecretEnv([[var: 'TOKEN', password: native_token]]) {sh "curl -X PUT ${status_url} -H 'Native-Token: ${TOKEN}' -H 'Content-Type: application/json' -d '{\"deployment_id\":\"${deployment_id}\", \"status\":\"DEPLOY_FAILED\", \"message\":\"Failed to ${last_stage}.\",\"stage_info\":{\"${last_stage.toUpperCase()}\": \"Failed\"}}'"}
			currentBuild.result = 'FAILURE'
		}finally{
			if (!currentBuild.result || currentBuild.result=='SUCCESS'){
            	withSecretEnv([[var: 'TOKEN', password: native_token]]) {sh "curl -X PUT ${status_url} -H 'Native-Token: ${TOKEN}' -H 'Content-Type: application/json' -d '{\"deployment_id\":\"${deployment_id}\", \"status\":\"DEPLOY_COMPLETE\", \"message\":\"done\"}'"}
			}
		}	
	}

}

def withSecretEnv(List<Map> varAndPasswordList, Closure closure) {
    wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: varAndPasswordList]) {
    withEnv(varAndPasswordList.collect { "${it.var}=${it.password}" }) {
      closure()
    }
  }
}
