def label = "mypod-${UUID.randomUUID().toString()}"
def serviceaccount = "jenkins-admin"
podTemplate(label: label, serviceAccount: serviceaccount,
           containers: [containerTemplate(name: 'kubectl', image: 'nexgtech/kubectl:1.15', ttyEnabled: true, command: 'cat'),
               containerTemplate(name: 'docker', image: 'docker:18.09.9', ttyEnabled: true, command: 'cat')],
				volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')])
{
node(label){
        def DockerReg_Url='devnetops.azurecr.io'
		def DockerReg_Credentials='ACR'
        def Docker_Image = 'security'
        def Image_Tag = 'latest'
		def K8s_Deployment = 'test'
  stage('Git Checkout'){
      git branch: Git_Branch,
      url: Git_Url,
      credentialsId: Git_Credential
       }
  
  stage('Create Docker image'){
      container('docker'){
              sh ("docker build -t devnetops.azurecr.io/security:latest --network=host -f Dockerfile .")
			}
			}

  stage('Pushing the Docker image to Container Registry'){
       container('docker') {		 
	             withCredentials([usernamePassword(credentialsId: 'ACR', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')])
				 {
			     sh ("docker login -u ${USERNAME} -p ${PASSWORD} "+DockerReg_Url)
				   sh ("docker push ${DockerReg_Url}/${Docker_Image}:${Image_Tag}")	
         }
 }
  }

    stage('Deploying to Kubernetes'){
      	container('kubectl') {
				try{
					sh("kubectl get deployment ${K8s_Deployment}")
					if(true){
						sh ("kubectl set image deployment/${K8s_Deployment} ${K8s_Deployment}=${DockerReg_Url}/${Docker_Image}:${Image_Tag}") 
					}
				} 
				catch(e){
					sh("kubectl apply -f security.yml")
					echo "deploying"
              }
			}
        
    }
}
}
  
 


